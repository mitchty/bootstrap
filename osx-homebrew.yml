---
#
# Setup/update homebrew junk
#
- hosts: localhost
  vars:
    - gem_cmd: gem
    - git_netrc_src: "/share/git-core/contrib/credential/netrc/git-credential-netrc"
    - brew_taps:
        - homebrew/dupes
        - homebrew/science
        - homebrew/versions
        - mitchty/clang_scan_view
        - mitchty/clang_scan_build
        - mpv-player/mpv
    - brew_with_options:
        tmux:
          options: wrap-pbcopy-and-pbpaste
        emacs:
          options: cocoa,srgb
        curl:
          options: brew_option_options
        python:
          options: universal,framework
        postgres:
          options: no-perl,no-tcl,without-python
        mpv:
          options: with-official-libass
    - brew_present:
        - reattach-to-user-namespace
        - gpg
        - git
        - ansible
        - htop
        - youtube-dl
        - ag
        - ispell
        - docbook
        - asciidoc
        - libxml2
        - libxslt
        - readline
        - sqlite
        - gdbm
        - wakeonlan
        - ruby
        - perl
        - lastpass-cli
        - keychain
        - openssl
        - pigz
        - xz
        - pixz
        - pbzip2
        - pv
        - rsync
        - entr
        - tree
        - wget
        - mercurial
        - ncurses
        - go
        - python3
        - clang-scan-view
        - clang-scan-build
        - gcc
        - llvm
    - brew_head:
        - mobile-shell
    - brew_linked:
        - ruby
        - perl
        - python
    - pips:
        - requests
        - lxml
        - docutils
        - howdoi
        - pep8
        - pyflakes
        - flake8
        - pylint
        - virtualenv
    - gems:
        - rubygems-update
        - pry
        - maid
        - gist
    - cpans:
        - File::HomeDir
        - App::cpanminus
        - App::rainbarf
        - Perl::Tidy
        - Perl::Critic
        - Encode
        - Storable
        - List::Util
        - Hash::Util
        - IO::Socket
  # Make shit happen!
  tasks:
    - name: Get brew install location
      shell: >-
        brew config |
        grep HOMEBREW_PREFIX |
        awk -F': ' '{print $2}'
      register: brew_home

    - name: Update Homebrew
      homebrew: update_homebrew=yes

    - name: List outdated homebrews
      command: brew outdated
      register: outdated

    - debug: msg="{{outdated.stdout}}"

    - name: Upgrade Homebrew installs
      homebrew: upgrade_all=yes

    - name: Setup Homebrew taps
      homebrew_tap: name={{item}} state=present
      with_items: brew_taps

    - name: Install state=present with install_options brews
      homebrew: state=present name={{ item.key }} install_options={{ item.value.options }}
      with_dict: brew_with_options

    - name: Install state=present without option brews
      homebrew: state=present name={{ item }}
      with_items: brew_present

    - name: Install state=head brews
      homebrew: state=head name={{ item }}
      with_items: brew_head

    # Ok so we need to setup the gpg credential helper for netrc
    - name: Get installed brew git version
      shell: >-
        brew info git 2>&1 |
        grep '^{{brew_home.stdout}}' |
        awk '{print $1}' |
        sort |
        tail -n1
      ignore_errors: true
      register: brew_git_prefix

    - name: Ensure ~/bin exists
      file: >-
        dest="~/bin"
        state=directory

    - name: Create link for git-credential-netrc to work
      file: >-
        src="{{brew_git_prefix.stdout}}{{git_netrc_src}}"
        dest="~/bin/git-credential-netrc"
        state=link

    - name: Get mosh install PREFIX
      shell: >-
        brew info mosh 2>&1 |
        grep '^{{brew_home.stdout}}' |
        awk '{print $1}' |
        sort |
        tail -n1
      ignore_errors: true
      register: brew_mosh_prefix

    - name: Create create mosh links
      file: >-
        src="{{brew_mosh_prefix.stdout}}/bin/{{item}}"
        dest="/usr/local/bin/{{item}}"
        state=link
      with_items:
        - mosh
        - mosh-server
        - mosh-client

    - name: Install Python pip modules
      environment:
        XML_CATALOG_FILES: "{{brew_home}}/etc/xml/catalog"
      command: "{{brew_home.stdout}}/bin/pip install --upgrade {{item}}"
      with_items: pips

    - name: Get full path of homebrew gem
      command: brew --prefix ruby
      register: brew_ruby_dir

    - include: gems.yml gem_cmd="{{brew_ruby_dir.stdout}}/bin/gem" gems=gems

    - name: Get hombrew perl /bin directory
      command: brew --prefix perl
      register: brew_perl_bin

    - name: Install cpanminus
      shell: >-
        curl -kL http://cpanmin.us |
        "{{brew_perl_bin.stdout}}/bin/perl" - App::cpanminus --force --notest

    - name: Install/Update cpan modules
      command: "{{brew_perl_bin.stdout}}/bin/cpanm --notest --force {{item}}"
      with_items: cpans

    - name: Install state=linked brews
     # oh no this would be too effing easy but no
     # homebrew: state=linked name={{ item }} --with-options=overwrite
      command: brew link --force --overwrite {{item}}
      with_items: brew_linked

    - name: brew cleanup
      command: brew cleanup
